@startuml relationships

package Model {
    class Movie <<entity>> {
        - title : String
        - isPresale : boolean
        - showTimes : ArrayList<ShowTime>
        + addShowTime(st : ShowTime)
    }

    class Theatre <<entity>> {
        - name : String
        - address : String
        - showTimes : ArrayList<ShowTime>
        + addShowTime(st : ShowTime)
    }

    class ShowTime <<entity>> {
        - time : String
        - movie : Movie
        - theatre : Theatre
        - seat : ArrayList<Seats>
        - ticket : ArrayList<Ticket>
    }

    class Seat <<entity>> {
        - number : int
        - ticket : Ticket
    }

    class Ticket <<entity>> {
        - id : int
        - movie : Movie
        - theatre : Theatre
        - showTime : ShowTime
        - seat : Seat
        - cost : double
        - isCredited : boolean
    }

    class RegisteredUser <<entity>> {
        - emailAddress : String
        - password : String
        - creditCard : String
        - firstName : String
        - lastName : String
        - address : String
        - annualFeeExpiryDate : String
        - tickets : ArrayList<Ticket>
        + addTicket(t : Ticket)
    }
}

package Frontend-React {
    class RegisterViewController <<boundary>> {

    }
    class LoginViewController <<boundary>> {

    }
    class AccountViewController <<boundary>> {

    }
    class TicketBuyingViewController <<boundary>> {

    }
    class MovieViewController <<boundary>> {

    }
    class TheatreViewController <<boundary>> {

    }
    class ShowTimeViewController <<boundary>> {

    }
    class SeatViewController <<boundary>> {

    }
    class PaymentViewController <<boundary>> {

    }
    class ReceiptViewController <<boundary>> {

    }

    class APIContextController {
        ' add getters and setters
        - getters()
        - setters()
    }
}

package Backend-Express {
    class ServerController <<control>> {
        ' add getters and setters
        - getters()
        - setters()
        ' add to do database
        - readDB()
        - writeDB()
        - emailReceipt(ticket : Ticket, emailAddress : String)
        - emailNews(user : RegisteredUser, news : String)
    }

    class DatabaseConnection <<boundary>> {
        - instance : DatabaseConnection
        - connection :  mysqlConnection
        + getInstance()
        + getConnection()
        + query()
    }
}

TicketBuyingViewController *-- MovieViewController
TicketBuyingViewController *-- TheatreViewController
TicketBuyingViewController *-- ShowTimeViewController
TicketBuyingViewController *-- SeatViewController
TicketBuyingViewController *-- PaymentViewController
TicketBuyingViewController *-- ReceiptViewController

RegisterViewController --> APIContextController
LoginViewController --> APIContextController
AccountViewController --> APIContextController
TicketBuyingViewController --> APIContextController
MovieViewController --> APIContextController
TheatreViewController --> APIContextController
ShowTimeViewController --> APIContextController
SeatViewController --> APIContextController
PaymentViewController --> APIContextController
ReceiptViewController --> APIContextController

Movie -- ShowTime
Theatre -- ShowTime
ServerController *-- ShowTime
ShowTime *-r- Seat
Ticket o-- Movie
Ticket o-- Theatre
Ticket o-- ShowTime
Ticket --- Seat
RegisteredUser --> Ticket

DatabaseConnection *-- DatabaseConnection

APIContextController -- ServerController : API communication

@enduml